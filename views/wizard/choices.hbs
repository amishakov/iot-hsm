<script>
    var slots = {{{slotstring}}}
    //console.log(slots);
    //console.log({{serial}});
    var serial = '{{serial}}';
    var slotid = '{{slotid}}';
    var slotindex;

    function formHandler() {
        let caoptions = document.getElementById('caoptions');
        let base64 = document.getElementById('base64');
        let optionvalue = caoptions.options[caoptions.selectedIndex].value;

        let params = {
            serial: serial,
            objectid: slotid,
            base64: base64.value
        }

        let url;

        if(optionvalue=='selfsigned') {
            url = '/api/wizard/selfsigned';
        } else if(optionvalue=='csr') {
            url = '/api/wizard/csr';
        } else if(optionvalue=='import') {
            url = '/api/wizard/import';
        } else {
            alert('Unrecognized option!');
            return false;
        }

        //console.log(params);
        $('#overlay').fadeIn();
        postRequest(url, params, function(err, resp) {
            if(err) {
                $('#overlay').fadeOut();
                alert(resp.message);
                submitbtn.disabled = false;
                //console.log(response);
            } else {
                if(optionvalue=='selfsigned') {
                    waitForSlots(function(err, resp) {
                        $('#overlay').fadeOut();
                        if(err) {
                            alert(err);
                        } else {
                            window.location = '/';
                        }
                    });
                } else if(optionvalue=='csr') {
                    $('#overlay').fadeOut();
                    //console.log(resp);
                    $('#showcsrmodal').modal('show');
                    document.getElementById('csrbody').innerText = resp.data;
                } else if(optionvalue=='import') {
                    waitForSlots(function(err, resp) {
                        $('#overlay').fadeOut();
                        if(err) {
                            alert(err);
                        } else {
                            window.location = '/';
                        }
                    });
                } else {
                    $('#overlay').fadeOut();
                    alert('Unrecognized option!');
                    return false;
                }
                //location.reload();
                //alert(resp.message);
                //console.log(resp);
            }
        });
    }

    function getSlotIndex() {
        for(let i = 0; i <= slots.slots.length - 1; i++) {
            if(slots.slots[i]['serial num']==serial) {
                return i;
            }
        }
        return -1;
    }

    function init() {
        checkSoftHSM2();
        if(slots.state=='initialized') {
            let index = getSlotIndex();
            if(index >= 0) {
                slotindex = index;
                changeCAOption();
            } else {
                alert('Invalid HSM serial number ' + serial);
            }
        }
    }

    window.onload = function() {
        checkStatus();
    }

    function changeCAOption() {
        let caoptions = document.getElementById('caoptions');
        let caoptionshelp = document.getElementById('caoptionshelp');
        let base64label = document.getElementById('base64label');
        let base64help = document.getElementById('base64help');
        let optionvalue = caoptions.options[caoptions.selectedIndex].value;

        if(optionvalue=='selfsigned') {
            caoptionshelp.innerHTML = 'This option is the most common and should be selected if you plan to use this HSM as a self-signed root certificate authority.';
            base64label.innerText = 'PKIaaS.io Provisioning Certificate';
            base64help.innerHTML = 'Paste the provisioning certificate for the certificate authority you created on PKIaaS.io.';
        } else if(optionvalue=='csr') {
            caoptionshelp.innerHTML = 'This option should be selected if you\'re planning to use this HSM as an intermediate certificate authority and you need a CSR to get signed by another certificate authority.';
            base64label.innerText = 'PKIaaS.io Provisioning Certificate';
            base64help.innerHTML = 'Paste the provisioning certificate for the certificate authority you created on PKIaaS.io.';
        } else if(optionvalue=='import') {
            caoptionshelp.innerHTML = 'This option should be selected if you\'re importing a certificate signed by another certificate authority after previously generating a CSR.';
            base64label.innerText = 'Import Signed Certificate';
            base64help.innerHTML = 'Paste the signed base64 certificate to import into the HSM.';
        } else {
            alert('Unrecognized option!');
            return false;
        }
    }

</script>
<div style="margin-top: 20px;" class="container">
    <div class="row">
        <div class="col-2"></div>
        <div class="col-8 mx-auto">
            <div class="shadow-lg card" style="width: 100%;">
                <!--<img class="card-img-top" alt="{{this.[token model]}}">-->
                <h3 class="pt-4 text-center card-title">Certificate Authority Options</h3>
                <div class="card-body">
                    <form onsubmit="formHandler(); return false;" method="POST">
                        <div class="form-group">
                            <label for="caoptions">Choose an option to continue:</label>
                            <select onchange="changeCAOption()" class="form-control" id="caoptions" name="caoptions" aria-describedby="caoptionshelp">
                                <option selected value="selfsigned">Generate a self-signed root certificate authority</option>
                                <option value="csr">Generate a CSR to be signed by another certificate authority</option>
                                <option value="import">Import a certificate signed by another certificate authority</option>
                            </select>
                            <small id="caoptionshelp" class="form-text text-muted"></small>
                        </div>
                        <div class="form-group">
                            <label id="base64label" for="base64"></label>
                            <textarea class="form-control" id="base64" rows="10"></textarea>
                            <small id="base64help" class="form-text text-muted"></small>
                        </div>
                        <div class="text-center form-group">
                            <input id="submitbtn" type="submit" class="text-center btn btn-primary" value="Submit" />
                        </div>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-2"></div>
    </div>
</div>
<div id="privatekeymodal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Paste Your Private Key</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="privatekey">Private Key</label>
                <textarea class="form-control" id="privatekey" rows="10"></textarea>
                <small id="privatekeyhelp" class="form-text text-muted">*Note: Currently, only unencrypted private keys are supported.</small>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-dismiss="modal">Save</button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
        </div>
    </div>
</div>
<div id="showcsrmodal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Certificate Signing Request</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">
            <p>Use the CSR below to get a signed certificate from your certificate authority. You can return to this page later to import it.</p>
            <pre style="font-size: .8rem;" id="csrbody"></pre>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
        </div>
    </div>
</div>