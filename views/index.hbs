<script>
    var slots = {{{slotstring}}}
    //console.log(slots);
    window.onload = function() {
        let logos = document.getElementsByClassName('card-img-top');
        for(let i = 0; i <= logos.length - 1; i++) {
            //console.log(logos[i].alt);
            switch(logos[i].alt.split(' ')[0]) {
                case "SoftHSM":
                    logos[i].src = '/images/SoftHSM-logo.png';
                    break;
                case "YubiKey":
                    logos[i].src = '/images/yubikey-iot.png';
                    break;
                default:
                    logos[i].src = '';
            }
        }
        checkStatus();
    }

    function showMessage(serial, slotid) {
        //console.log(serial);
        //console.log(slotid);
        alert(iot.hsm[serial][slotid].message || 'Pending connection...');
    }

    function init() {
        checkSoftHSM2();
    }

    function changeSlot(slotindex) {
        let selectedslot = document.getElementById('selectedslot' + slotindex);
        let slotinfo = document.getElementById('slotinfo' + slotindex);
        let selectedslotvalue = selectedslot.options[selectedslot.selectedIndex].value;

        //console.log(selectedslotvalue);
        if(selectedslotvalue=='false') {
            slotinfo.innerHTML = '<i>No slot selected</i>';
        } else {
            let status;
            if(slots.slots[slotindex].objects[selectedslotvalue]['Certificate Object'][0].certinfo.subject.commonName[0] == 'TEMPORARY CERT FOR KEY IMPORT') {
                status = 'Partially Provisioned <a href="/wizard/provision/' + slots.slots[slotindex]['serial num'] + '/' + slots.slots[slotindex].objects[selectedslotvalue]['Certificate Object'][0].ID + '">Complete Provisioning</a>'
            } else {
                if(iot.hsm[slots.slots[slotindex]['serial num']][selectedslotvalue].connected) {
                    status = '<span style="color: green;">Connected</span>';
                } else {
                    status = '<a style="color: red" href="javascript: showMessage(\'' + slots.slots[slotindex]['serial num'] + '\', \'' + selectedslotvalue + '\')">Not Connected</a>';
                }
            }
            let clearslot;
            if(selectedslotvalue=='19') {
                clearslot = '';
            } else {
                clearslot = "<a href=\"javascript: clearSlot(\'" + slots.slots[slotindex]['serial num'] + "\', \'" + selectedslotvalue + "\');\" class=\"card-link\">Clear Slot</a>"
            }
            slotinfo.innerHTML = 'Name: ' + slots.slots[slotindex].objects[selectedslotvalue]['Certificate Object'][0].certinfo.subject.commonName[0] + '<br />\r\n\
            ID: ' + slots.slots[slotindex].objects[selectedslotvalue]['Certificate Object'][0].ID + '<br />\r\n\
            Status: ' + status + ' <br />\r\n\
            <div class="row">\r\n\
                <div class="col-6 test-left">\r\n\
                    <a href="javascript: viewCertificate(\'' + slotindex + '\', \'' + selectedslotvalue + '\')">View Certificate</a>\r\n\
                </div>\r\n\
                <div class="col-6 text-right">\r\n\
                    ' + clearslot + '\r\n\
                </div>\r\n\
            </div>';
        }
    }

    function viewCertificate(slotindex, selectedslotvalue) {
        let certbody = document.getElementById('certbody');
        let modalslotid = document.getElementById('modalslotid');
        modalslotid.innerText = selectedslotvalue;
        certbody.innerText = slots.slots[slotindex].objects[selectedslotvalue]['Certificate Object'][0].base64;
        $('#showcertmodal').modal('show');
    }

    function clearSlot(serial, slotid) {
        var r = confirm("Are you sure you want to clear slot " + slotid + " in the token with serial " + serial + "?");
        if (r == true) {
            $('#overlay').fadeIn();
            postRequest('/api/pkcs11/clearslot', {
                serial: serial,
                objectid: slotid,
                }, function(err, resp) {
                if(err) {
                    $('#overlay').fadeOut();
                    alert(resp.message);
                    //console.log(response);
                } else {
                    waitForSlots(function(err, resp) {
                        $('#overlay').fadeOut();
                        if(err) {
                            alert(err);
                        } else {
                            //console.log(resp);
                            location.reload();
                        }
                    });
                }
            });
        }
    }

    function deleteHSM(serial) {
        var r = confirm("Are you sure you want to delete the entire SoftHSM2 device with serial " + serial + "? This will delete the HSM and all certificates provisioned in the slots!");
        if (r == true) {
            $('#overlay').fadeIn();
            postRequest('/api/softhsm2/delete', {
                serial: serial
                }, function(err, resp) {
                if(err) {
                    $('#overlay').fadeOut();
                    alert(resp.message);
                    //console.log(response);
                } else {
                    waitForSlots(function(err, resp) {
                        $('#overlay').fadeOut();
                        if(err) {
                            alert(err);
                        } else {
                            //console.log(resp);
                            location.reload();
                        }
                    });
                }
            });
        } else {
            let hsmoptions = document.getElementById('hsm' + serial);
            hsmoptions.selectedIndex = 0;
        }
    }

    function setPINs() {
        let selectedserial = document.getElementById('selectedserial');
        let setsopin = document.getElementById('setSOPin');
        let setuserpin = document.getElementById('setUserPin');
        let persist = document.getElementById('persist');
        postRequest('/api/pin/set', {
            serial: selectedserial.value,
            sopin: setsopin.value,
            userpin: setuserpin.value,
            persist: persist.checked
            }, function(err, resp) {
            if(err) {
                alert(resp.message);
            } else {
                $('#setPINModal').modal('hide');
                reload();
            }
        });
    }

    function HSMOptions(serial) {
        let hsmoptions = document.getElementById('hsm' + serial);
        let hsmoptionvalue = hsmoptions.options[hsmoptions.selectedIndex].value;
        if(hsmoptionvalue=='provision') {
            window.location = '/wizard/key/' + serial;
        } else if(hsmoptionvalue=='delete') {
            deleteHSM(serial);
        } else if(hsmoptionvalue=='pins') {
            let selectedserial = document.getElementById('selectedserial');
            selectedserial.value = serial;
            $('#setPINModal').modal('show');
            hsmoptions.selectedIndex = 0;
        } else {

        }
        console.log(hsmoptionvalue);
    }
</script>
<div class="container mt-5">
    <div class="row">
    {{#each slots.slots}}
        {{#if this.[serial num]}}
        <div class="col-lg-6 col-sm-12 mx-auto">
            <div class="shadow-lg card mb-5 mx-auto" style="width: 25rem;">
                <img class="card-img-top" alt="{{this.[token model]}}">
                <div class="card-body">
                    <h5 class="card-title">{{this.[token model]}}</h5>
                    <h6>Serial: {{this.[serial num]}}</h6>
                    <h6>Token ID: {{this.hexid}}</h6>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <select onchange="changeSlot({{@index}});" id="selectedslot{{@index}}" class="form-control">
                            <option value="false">{{this.objects.length}} Configured Slots...</option>
                            {{#each this.objects}}
                            <option value="{{@key}}">Slot {{this.[Certificate Object].[0].ID}} - {{this.[Certificate Object].[0].certinfo.subject.commonName.[0]}}</option>
                            {{/each}}
                        </select>
                    </li>
                    <li style="height: 120px;" class="list-group-item" id="slotinfo{{@index}}"><i>No slot selected</i></li>
                    <li class="list-group-item">
                        <div class="row">
                            <!--<div class="col-6 test-left">
                                <a href="/wizard/key/{{this.[serial num]}}" class="card-link">Provision Slot</a>
                            </div>
                            {{#ifEquals this.[token model] 'SoftHSM v2'}}
                            <div class="col-6 text-right">
                                <a href="javascript: deleteHSM('{{this.[serial num]}}');" class="card-link">Delete HSM</a>
                            </div>
                            {{/ifEquals}}-->
                            <select onchange="HSMOptions('{{this.[serial num]}}');" id="hsm{{this.[serial num]}}" class="ml-3 mr-3 form-control">
                                <option value="false">HSM Options...</option>
                                <option value="provision">Provision a New Slot</option>
                                {{#ifEquals this.[token model] 'SoftHSM v2'}}
                                <option value="delete">Delete HSM</option>
                                {{else}}
                                <option value="pins">Set PINs</option>
                                {{/ifEquals}}
                        </select>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        {{/if}}
    {{/each}}
    </div>
</div>
<div id="showcertmodal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Slot <span id="modalslotid"></span> Certificate</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">
            <pre style="font-size: .8rem;" id="certbody"></pre>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
        </div>
    </div>
</div>
<div class="modal fade" id="setPINModal" tabindex="-1" role="dialog" aria-labelledby="setPINModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title">Set PINs</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <form onsubmit="setPINs(); return false;">
            <div class="modal-body">
                <p>The options below make this device aware of the PINs on the selected HSM. They are not used to change the PINs on the HSM.</p>
                <input id="selectedserial" name="selectedserial" type="hidden" />
                <div class="form-group">
                    <label for="setSOPin">SO PIN</label>
                    <input type="password" class="form-control" id="setSOPin" name="setSOPin" aria-describedby="setSOPinHelp" value="">
                    <small id="setSOPinHelp" class="form-text text-muted">Enter the security officer PIN</small>
                </div>
                <div class="form-group">
                    <label for="setUserPin">User PIN</label>
                    <input type="password" class="form-control" id="setUserPin" name="setUserPin" aria-describedby="setUserPinHelp" value="" placeholder="">
                    <small id="setUserPinHelp" class="form-text text-muted">Enter the user PIN</small>
                </div>
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="persist">
                    <label class="form-check-label" for="persist">Write To Disk</label>
                    <small id="persistHelp" class="form-text text-muted">Enabling this option will allow the stored PIN to persist after a reboot, but will result in the PIN being written to disk using VERY basic encryption.</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <input type="submit" class="btn btn-primary" value="Save PINs" />
            </div>
        </form>
        </div>
    </div>
</div>
<style>
    html, body {
    height: 100%;
}

/* CSS only for examples not required for centering */
.container {
    height: 100%;
}

h1 {
    text-align: center;
}

.note {
    position: absolute;
    z-index: 10;
    right: 0;
    top: 0;
    padding: 5px;
    background: #eee;
    max-width: 360px;
    border: 1px dotted #bbb;
}
</style>